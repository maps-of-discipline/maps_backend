"""Create initial tables

Revision ID: a2d8c700dd17
Revises: 
Create Date: 2025-04-06 11:13:26.030263

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.sql import table, column # Для ручного создания table

# revision identifiers, used by Alembic.
revision = 'a2d8c700dd17'
down_revision = None
branch_labels = None
depends_on = None

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('Mode',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('action', sa.String(length=255), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('competencies_competency_type',
    sa.Column('name', sa.String(length=100), nullable=False, comment='Название типа компетенции'),
    sa.Column('code', sa.String(length=10), nullable=False, comment='Код типа (УК, ОПК, ПК)'),
    sa.Column('description', sa.Text(), nullable=True, comment='Описание типа компетенции'),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('code')
    )
    op.create_table('competencies_fgos_vo',
    sa.Column('number', sa.String(length=50), nullable=False, comment='Номер приказа'),
    sa.Column('date', sa.Date(), nullable=False, comment='Дата утверждения'),
    sa.Column('direction_code', sa.String(length=10), nullable=False, comment='Код направления, например 09.03.01'),
    sa.Column('direction_name', sa.String(length=255), nullable=False, comment='Название направления'),
    sa.Column('education_level', sa.String(length=50), nullable=False, comment='Уровень образования (бакалавриат/магистратура/аспирантура)'),
    sa.Column('generation', sa.String(length=10), nullable=False, comment='Поколение ФГОС (3+, 3++)'),
    sa.Column('file_path', sa.String(length=255), nullable=True, comment='Путь к PDF файлу'),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('competencies_prof_standard',
    sa.Column('code', sa.String(length=50), nullable=False, comment='Код профстандарта, например 06.001'),
    sa.Column('name', sa.String(length=255), nullable=False, comment='Название профстандарта'),
    sa.Column('order_number', sa.String(length=50), nullable=True, comment='Номер приказа'),
    sa.Column('order_date', sa.Date(), nullable=True, comment='Дата приказа'),
    sa.Column('registration_number', sa.String(length=50), nullable=True, comment='Рег. номер Минюста'),
    sa.Column('registration_date', sa.Date(), nullable=True, comment='Дата регистрации в Минюсте'),
    sa.Column('parsed_content', sa.Text(), nullable=True, comment='Содержимое стандарта в Markdown'),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('roles',
    sa.Column('id_role', sa.Integer(), nullable=False),
    sa.Column('name_role', sa.String(length=100), nullable=False),
    sa.PrimaryKeyConstraint('id_role')
    )
    op.create_table('spr_bells',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('order', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('spr_branch',
    sa.Column('id_branch', sa.Integer(), nullable=False),
    sa.Column('city', sa.String(length=255), nullable=False),
    sa.Column('location', sa.String(length=255), nullable=False),
    sa.PrimaryKeyConstraint('id_branch')
    )
    op.create_table('spr_degree_education',
    sa.Column('id_degree', sa.Integer(), nullable=False),
    sa.Column('name_deg', sa.String(length=255), nullable=False),
    sa.PrimaryKeyConstraint('id_degree')
    )
    op.create_table('spr_discipline',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('spr_form_education',
    sa.Column('id_form', sa.Integer(), nullable=False),
    sa.Column('form', sa.String(length=255), nullable=False),
    sa.PrimaryKeyConstraint('id_form')
    )
    op.create_table('spr_okco',
    sa.Column('program_code', sa.String(length=255), nullable=False),
    sa.Column('name_okco', sa.String(length=255), nullable=False),
    sa.PrimaryKeyConstraint('program_code')
    )
    op.create_table('spr_place',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('prefix', sa.String(length=255), nullable=False),
    sa.Column('is_online', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('spr_rop',
    sa.Column('id_rop', sa.Integer(), nullable=False),
    sa.Column('last_name', sa.String(length=255), nullable=False),
    sa.Column('first_name', sa.String(length=255), nullable=False),
    sa.Column('middle_name', sa.String(length=255), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('telephone', sa.String(length=255), nullable=False),
    sa.PrimaryKeyConstraint('id_rop')
    )
    op.create_table('spr_standard_zet',
    sa.Column('id_standard', sa.Integer(), nullable=False),
    sa.Column('type_standard', sa.String(length=255), nullable=False),
    sa.PrimaryKeyConstraint('id_standard')
    )
    op.create_table('Permissions',
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.Column('mode_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['mode_id'], ['Mode.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id_role'], ondelete='CASCADE')
    )
    op.create_table('competencies_educational_program',
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('code', sa.String(length=50), nullable=False, comment='Код направления, например 09.03.01'),
    sa.Column('profile', sa.String(length=255), nullable=True),
    sa.Column('qualification', sa.String(length=50), nullable=True),
    sa.Column('form_of_education', sa.String(length=50), nullable=True),
    sa.Column('fgos_vo_id', sa.Integer(), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['fgos_vo_id'], ['competencies_fgos_vo.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('competencies_fgos_recommended_ps',
    sa.Column('fgos_vo_id', sa.Integer(), nullable=False),
    sa.Column('prof_standard_id', sa.Integer(), nullable=False),
    sa.Column('is_mandatory', sa.Boolean(), nullable=True, comment='Обязательный ПС или рекомендованный'),
    sa.Column('description', sa.String(length=255), nullable=True, comment='Примечание к связи'),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['fgos_vo_id'], ['competencies_fgos_vo.id'], ),
    sa.ForeignKeyConstraint(['prof_standard_id'], ['competencies_prof_standard.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('fgos_vo_id', 'prof_standard_id', name='uq_fgos_ps')
    )
    op.create_table('competencies_generalized_labor_function',
    sa.Column('prof_standard_id', sa.Integer(), nullable=False),
    sa.Column('code', sa.String(length=10), nullable=False, comment='Код ОТФ, например A'),
    sa.Column('name', sa.String(length=255), nullable=False, comment='Название ОТФ'),
    sa.Column('qualification_level', sa.String(length=10), nullable=True, comment='Уровень квалификации'),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['prof_standard_id'], ['competencies_prof_standard.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('spr_faculty',
    sa.Column('id_faculty', sa.Integer(), nullable=False),
    sa.Column('name_faculty', sa.String(length=255), nullable=False),
    sa.Column('id_branch', sa.Integer(), nullable=False),
    sa.Column('dean', sa.String(length=255), nullable=True),
    sa.Column('admin_only', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['id_branch'], ['spr_branch.id_branch'], ),
    sa.PrimaryKeyConstraint('id_faculty')
    )
    op.create_table('spr_name_op',
    sa.Column('id_spec', sa.Integer(), nullable=False),
    sa.Column('program_code', sa.String(length=255), nullable=False),
    sa.Column('num_profile', sa.String(length=255), nullable=False),
    sa.Column('name_spec', sa.String(length=255), nullable=False),
    sa.ForeignKeyConstraint(['program_code'], ['spr_okco.program_code'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id_spec')
    )
    op.create_table('spr_volume_degree_zet',
    sa.Column('id_volume_deg', sa.Integer(), nullable=False),
    sa.Column('program_code', sa.String(length=255), nullable=False),
    sa.Column('id_standard', sa.Integer(), nullable=False),
    sa.Column('zet', sa.Integer(), nullable=False),
    sa.Column('effective_date', sa.Date(), nullable=True),
    sa.ForeignKeyConstraint(['program_code'], ['spr_okco.program_code'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id_volume_deg')
    )
    op.create_table('unification_discipline',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('discipline', sa.String(length=255), nullable=True),
    sa.Column('is_faculties_different', sa.Boolean(), nullable=True),
    sa.Column('ugsn', sa.String(length=255), nullable=True),
    sa.Column('degree', sa.String(length=255), nullable=True),
    sa.Column('direction', sa.Boolean(), nullable=True),
    sa.Column('semesters_count', sa.Integer(), nullable=True),
    sa.Column('amount', sa.Integer(), nullable=True),
    sa.Column('measure_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['measure_id'], ['d_ed_izmereniya.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('competencies_educational_program_ps',
    sa.Column('educational_program_id', sa.Integer(), nullable=False),
    sa.Column('prof_standard_id', sa.Integer(), nullable=False),
    sa.Column('priority', sa.Integer(), nullable=True, comment='Приоритет ПС в рамках ОП'),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['educational_program_id'], ['competencies_educational_program.id'], ),
    sa.ForeignKeyConstraint(['prof_standard_id'], ['competencies_prof_standard.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('educational_program_id', 'prof_standard_id', name='uq_educational_program_ps')
    )
    op.create_table('competencies_labor_function',
    sa.Column('generalized_labor_function_id', sa.Integer(), nullable=False),
    sa.Column('code', sa.String(length=10), nullable=False, comment='Код ТФ, например A/01.6'),
    sa.Column('name', sa.String(length=255), nullable=False, comment='Название ТФ'),
    sa.Column('qualification_level', sa.String(length=10), nullable=True, comment='Уровень квалификации'),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['generalized_labor_function_id'], ['competencies_generalized_labor_function.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('discipline_period_assoc',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('unification_discipline_id', sa.Integer(), nullable=True),
    sa.Column('period_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['period_id'], ['d_period.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['unification_discipline_id'], ['unification_discipline.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('tbl_department',
    sa.Column('id_department', sa.Integer(), nullable=False),
    sa.Column('name_department', sa.String(length=255), nullable=True),
    sa.Column('faculty_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['faculty_id'], ['spr_faculty.id_faculty'], ),
    sa.PrimaryKeyConstraint('id_department')
    )
    op.create_table('tutors_order',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('faculty_id', sa.Integer(), nullable=False),
    sa.Column('date', sa.DateTime(), nullable=True),
    sa.Column('num_order', sa.Integer(), nullable=False),
    sa.Column('spr_form_education_id', sa.Integer(), nullable=True),
    sa.Column('year', sa.Integer(), nullable=False),
    sa.Column('executor', sa.String(length=255), nullable=False),
    sa.Column('signer', sa.String(length=255), nullable=False),
    sa.ForeignKeyConstraint(['faculty_id'], ['spr_faculty.id_faculty'], ),
    sa.ForeignKeyConstraint(['spr_form_education_id'], ['spr_form_education.id_form'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('unification_okso_assoc',
    sa.Column('unification_id', sa.Integer(), nullable=True),
    sa.Column('okso_id', sa.String(length=255), nullable=True),
    sa.ForeignKeyConstraint(['okso_id'], ['spr_okco.program_code'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['unification_id'], ['unification_discipline.id'], ondelete='CASCADE')
    )
    op.create_table('competencies_competency',
    sa.Column('competency_type_id', sa.Integer(), nullable=False),
    sa.Column('fgos_vo_id', sa.Integer(), nullable=True),
    sa.Column('based_on_labor_function_id', sa.Integer(), nullable=True),
    sa.Column('code', sa.String(length=20), nullable=False, comment='Код компетенции (УК-1, ОПК-2, ПК-3...)'),
    sa.Column('name', sa.Text(), nullable=False, comment='Формулировка компетенции'),
    sa.Column('description', sa.Text(), nullable=True, comment='Дополнительное описание компетенции'),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['based_on_labor_function_id'], ['competencies_labor_function.id'], ),
    sa.ForeignKeyConstraint(['competency_type_id'], ['competencies_competency_type.id'], ),
    sa.ForeignKeyConstraint(['fgos_vo_id'], ['competencies_fgos_vo.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('code', 'fgos_vo_id', name='uq_competency_code_fgos')
    )
    op.create_table('competencies_labor_action',
    sa.Column('labor_function_id', sa.Integer(), nullable=False),
    sa.Column('description', sa.Text(), nullable=False, comment='Описание трудового действия'),
    sa.Column('order', sa.Integer(), nullable=True, comment='Порядок в списке'),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['labor_function_id'], ['competencies_labor_function.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('competencies_required_knowledge',
    sa.Column('labor_function_id', sa.Integer(), nullable=False),
    sa.Column('description', sa.Text(), nullable=False, comment='Описание необходимого знания'),
    sa.Column('order', sa.Integer(), nullable=True, comment='Порядок в списке'),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['labor_function_id'], ['competencies_labor_function.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('competencies_required_skill',
    sa.Column('labor_function_id', sa.Integer(), nullable=False),
    sa.Column('description', sa.Text(), nullable=False, comment='Описание необходимого умения'),
    sa.Column('order', sa.Integer(), nullable=True, comment='Порядок в списке'),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['labor_function_id'], ['competencies_labor_function.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('faculty_discipline_period',
    sa.Column('discipline_period_id', sa.Integer(), nullable=True),
    sa.Column('faculty_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['discipline_period_id'], ['discipline_period_assoc.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['faculty_id'], ['spr_faculty.id_faculty'], ondelete='CASCADE')
    )
    op.create_table('tbl_aup',
    sa.Column('id_aup', sa.Integer(), nullable=False),
    sa.Column('file', sa.String(length=255), nullable=False),
    sa.Column('num_aup', sa.String(length=255), nullable=False),
    sa.Column('base', sa.String(length=255), nullable=False),
    sa.Column('id_faculty', sa.Integer(), nullable=False),
    sa.Column('id_rop', sa.Integer(), nullable=False),
    sa.Column('type_educ', sa.String(length=255), nullable=False),
    sa.Column('qualification', sa.String(length=255), nullable=False),
    sa.Column('type_standard', sa.String(length=255), nullable=False),
    sa.Column('id_department', sa.Integer(), nullable=True),
    sa.Column('period_educ', sa.String(length=255), nullable=False),
    sa.Column('id_degree', sa.Integer(), nullable=False),
    sa.Column('id_form', sa.Integer(), nullable=False),
    sa.Column('years', sa.Integer(), nullable=False),
    sa.Column('months', sa.Integer(), nullable=True),
    sa.Column('id_spec', sa.Integer(), nullable=True),
    sa.Column('year_beg', sa.Integer(), nullable=False),
    sa.Column('year_end', sa.Integer(), nullable=False),
    sa.Column('is_actual', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['id_degree'], ['spr_degree_education.id_degree'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['id_department'], ['tbl_department.id_department'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['id_faculty'], ['spr_faculty.id_faculty'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['id_form'], ['spr_form_education.id_form'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['id_rop'], ['spr_rop.id_rop'], ),
    sa.ForeignKeyConstraint(['id_spec'], ['spr_name_op.id_spec'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id_aup')
    )
    op.create_table('tbl_users',
    sa.Column('id_user', sa.Integer(), nullable=False),
    sa.Column('login', sa.String(length=100), nullable=False),
    sa.Column('name', sa.String(length=200), nullable=True),
    sa.Column('email', sa.String(length=100), nullable=True),
    sa.Column('password_hash', sa.String(length=200), nullable=False),
    sa.Column('auth_type', sa.String(length=255), nullable=True),
    sa.Column('approved_lk', sa.Boolean(), nullable=True),
    sa.Column('request_approve_date', sa.DateTime(), nullable=True),
    sa.Column('lk_id', sa.Integer(), nullable=True),
    sa.Column('department_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['department_id'], ['tbl_department.id_department'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id_user'),
    sa.UniqueConstraint('login'),
    sa.UniqueConstraint('password_hash')
    )
    op.create_table('tutors',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=400), nullable=False),
    sa.Column('lk_id', sa.Integer(), nullable=False),
    sa.Column('post', sa.String(length=400), nullable=True),
    sa.Column('id_department', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['id_department'], ['tbl_department.id_department'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('unification_load',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('education_form_id', sa.Integer(), nullable=True),
    sa.Column('discipline_period_assoc_id', sa.Integer(), nullable=True),
    sa.Column('lectures', sa.Float(), nullable=True),
    sa.Column('seminars', sa.Float(), nullable=True),
    sa.Column('srs', sa.Float(), nullable=True),
    sa.Column('practices', sa.Float(), nullable=True),
    sa.Column('control_type_id', sa.Integer(), nullable=True),
    sa.Column('zet', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['control_type_id'], ['d_control_type.id'], ),
    sa.ForeignKeyConstraint(['discipline_period_assoc_id'], ['discipline_period_assoc.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['education_form_id'], ['spr_form_education.id_form'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('Revision',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=True),
    sa.Column('date', sa.DateTime(), nullable=True),
    sa.Column('isActual', sa.Boolean(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('aup_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['aup_id'], ['tbl_aup.id_aup'], ),
    sa.ForeignKeyConstraint(['user_id'], ['tbl_users.id_user'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('aup_data',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('id_aup', sa.Integer(), nullable=False),
    sa.Column('id_block', sa.Integer(), nullable=True),
    sa.Column('shifr', sa.String(length=30), nullable=False),
    sa.Column('id_part', sa.Integer(), nullable=True),
    sa.Column('id_module', sa.Integer(), nullable=True),
    sa.Column('id_group', sa.Integer(), nullable=True),
    sa.Column('id_type_record', sa.Integer(), nullable=False),
    sa.Column('id_discipline', sa.Integer(), nullable=True),
    sa.Column('discipline', sa.String(length=350), nullable=False),
    sa.Column('id_period', sa.Integer(), nullable=False),
    sa.Column('num_row', sa.Integer(), nullable=False),
    sa.Column('id_type_control', sa.Integer(), nullable=False),
    sa.Column('amount', sa.Integer(), nullable=False),
    sa.Column('id_edizm', sa.Integer(), nullable=False),
    sa.Column('zet', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['id_aup'], ['tbl_aup.id_aup'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['id_block'], ['d_blocks.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['id_discipline'], ['spr_discipline.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['id_edizm'], ['d_ed_izmereniya.id'], ),
    sa.ForeignKeyConstraint(['id_group'], ['groups.id_group'], ondelete='SET DEFAULT'),
    sa.ForeignKeyConstraint(['id_module'], ['d_modules.id'], ondelete='SET DEFAULT'),
    sa.ForeignKeyConstraint(['id_part'], ['d_part.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['id_period'], ['d_period.id'], ),
    sa.ForeignKeyConstraint(['id_type_control'], ['d_control_type.id'], ),
    sa.ForeignKeyConstraint(['id_type_record'], ['d_type_record.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('competencies_educational_program_aup',
    sa.Column('educational_program_id', sa.Integer(), nullable=False),
    sa.Column('aup_id', sa.Integer(), nullable=False),
    sa.Column('is_primary', sa.Boolean(), nullable=True, comment='Является ли этот АУП основным для программы'),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['aup_id'], ['tbl_aup.id_aup'], ),
    sa.ForeignKeyConstraint(['educational_program_id'], ['competencies_educational_program.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('educational_program_id', 'aup_id', name='uq_educational_program_aup')
    )
    op.create_table('competencies_indicator',
    sa.Column('competency_id', sa.Integer(), nullable=False),
    sa.Column('code', sa.String(length=20), nullable=False, comment='Код индикатора (ИУК-1.1, ИОПК-2.3, ИПК-3.2...)'),
    sa.Column('formulation', sa.Text(), nullable=False, comment='Формулировка индикатора'),
    sa.Column('source', sa.String(length=255), nullable=True, comment='Источник (ФГОС, ПООП, ВУЗ, ПС...)'),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['competency_id'], ['competencies_competency.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('code', 'competency_id', name='uq_indicator_code_competency')
    )
    op.create_table('study_group',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('num_aup', sa.String(length=255), nullable=False),
    sa.Column('tutor_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['tutor_id'], ['tutors.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('tbl_token',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('refresh_token', sa.String(length=256), nullable=False),
    sa.Column('user_agent', sa.String(length=256), nullable=False),
    sa.Column('ttl', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['tbl_users.id_user'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_roles',
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id_role'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['tbl_users.id_user'], ondelete='CASCADE')
    )
    op.create_table('users_faculty',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('faculty_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['faculty_id'], ['spr_faculty.id_faculty'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['tbl_users.id_user'], ondelete='CASCADE')
    )
    op.create_table('ChangeLog',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('model', sa.String(length=45), nullable=True),
    sa.Column('row_id', sa.Integer(), nullable=True),
    sa.Column('field', sa.String(length=45), nullable=True),
    sa.Column('old', sa.String(length=500), nullable=True),
    sa.Column('new', sa.String(length=500), nullable=True),
    sa.Column('revision_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['revision_id'], ['Revision.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('competencies_indicator_ps_link',
    sa.Column('indicator_id', sa.Integer(), nullable=False),
    sa.Column('labor_function_id', sa.Integer(), nullable=False),
    sa.Column('relevance_score', sa.Float(), nullable=True, comment='Оценка релевантности (от 0 до 1)'),
    sa.Column('is_manual', sa.Boolean(), nullable=True, comment='Связь установлена вручную'),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['indicator_id'], ['competencies_indicator.id'], ),
    sa.ForeignKeyConstraint(['labor_function_id'], ['competencies_labor_function.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('indicator_id', 'labor_function_id', name='uq_indicator_tf')
    )
    op.create_table('competencies_matrix',
    sa.Column('aup_data_id', sa.Integer(), nullable=False),
    sa.Column('indicator_id', sa.Integer(), nullable=False),
    sa.Column('relevance_score', sa.Float(), nullable=True, comment='Оценка релевантности (от 0 до 1)'),
    sa.Column('is_manual', sa.Boolean(), nullable=True, comment='Связь установлена вручную'),
    sa.Column('created_by', sa.Integer(), nullable=True, comment='ID пользователя, создавшего связь'),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['aup_data_id'], ['aup_data.id'], ),
    sa.ForeignKeyConstraint(['indicator_id'], ['competencies_indicator.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('aup_data_id', 'indicator_id', name='uq_matrix_aup_indicator')
    )
    op.create_table('discipline_table',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('id_aup', sa.Integer(), nullable=False),
    sa.Column('id_unique_discipline', sa.Integer(), nullable=False),
    sa.Column('study_group_id', sa.Integer(), nullable=False),
    sa.Column('semester', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['id_aup'], ['tbl_aup.id_aup'], ),
    sa.ForeignKeyConstraint(['id_unique_discipline'], ['spr_discipline.id'], ),
    sa.ForeignKeyConstraint(['study_group_id'], ['study_group.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('grade_table',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('id_aup', sa.Integer(), nullable=False),
    sa.Column('id_unique_discipline', sa.Integer(), nullable=False),
    sa.Column('semester', sa.Integer(), nullable=False),
    sa.Column('study_group_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['id_aup'], ['tbl_aup.id_aup'], ),
    sa.ForeignKeyConstraint(['id_unique_discipline'], ['spr_discipline.id'], ),
    sa.ForeignKeyConstraint(['study_group_id'], ['study_group.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('students',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=400), nullable=False),
    sa.Column('study_group_id', sa.Integer(), nullable=False),
    sa.Column('lk_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['study_group_id'], ['study_group.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('tutors_order_row',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('tutors_order_id', sa.Integer(), nullable=False),
    sa.Column('department_id', sa.Integer(), nullable=False),
    sa.Column('study_group_id', sa.Integer(), nullable=False),
    sa.Column('tutor_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['department_id'], ['tbl_department.id_department'], ),
    sa.ForeignKeyConstraint(['study_group_id'], ['study_group.id'], ),
    sa.ForeignKeyConstraint(['tutor_id'], ['tutors.id'], ),
    sa.ForeignKeyConstraint(['tutors_order_id'], ['tutors_order.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('grade_type',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('type', sa.String(length=255), nullable=False),
    sa.Column('min_grade', sa.Integer(), nullable=True),
    sa.Column('max_grade', sa.Integer(), nullable=True),
    sa.Column('archived', sa.Boolean(), nullable=True),
    sa.Column('binary', sa.Boolean(), nullable=True),
    sa.Column('weight_grade', sa.Integer(), nullable=True),
    sa.Column('color', sa.String(length=255), nullable=True),
    sa.Column('is_custom', sa.Boolean(), nullable=True),
    sa.Column('discipline_table_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['discipline_table_id'], ['discipline_table.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('topic',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('discipline_table_id', sa.Integer(), nullable=True),
    sa.Column('topic', sa.String(length=400), nullable=True),
    sa.Column('chapter', sa.String(length=400), nullable=True),
    sa.Column('id_type_control', sa.Integer(), nullable=True),
    sa.Column('task_link', sa.String(length=400), nullable=True),
    sa.Column('task_link_name', sa.String(length=255), nullable=True),
    sa.Column('completed_task_link', sa.String(length=255), nullable=True),
    sa.Column('completed_task_link_name', sa.String(length=255), nullable=True),
    sa.Column('study_group_id', sa.Integer(), nullable=False),
    sa.Column('date', sa.DateTime(), nullable=True),
    sa.Column('lesson_order', sa.Integer(), nullable=True),
    sa.Column('spr_bells_id', sa.Integer(), nullable=True),
    sa.Column('date_task_finish', sa.DateTime(), nullable=True),
    sa.Column('date_task_finish_include', sa.Boolean(), nullable=True),
    sa.Column('spr_place_id', sa.Integer(), nullable=True),
    sa.Column('place_note', sa.String(length=400), nullable=True),
    sa.Column('note', sa.String(length=400), nullable=True),
    sa.ForeignKeyConstraint(['discipline_table_id'], ['discipline_table.id'], ),
    sa.ForeignKeyConstraint(['id_type_control'], ['d_control_type.id'], ),
    sa.ForeignKeyConstraint(['spr_bells_id'], ['spr_bells.id'], ),
    sa.ForeignKeyConstraint(['spr_place_id'], ['spr_place.id'], ),
    sa.ForeignKeyConstraint(['study_group_id'], ['study_group.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('grade_column',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('discipline_table_id', sa.Integer(), nullable=False),
    sa.Column('grade_type_id', sa.Integer(), nullable=False),
    sa.Column('topic_id', sa.Integer(), nullable=True),
    sa.Column('hidden', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['discipline_table_id'], ['discipline_table.id'], ),
    sa.ForeignKeyConstraint(['grade_type_id'], ['grade_type.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['topic_id'], ['topic.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('grades',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('value', sa.Integer(), nullable=True),
    sa.Column('student_id', sa.Integer(), nullable=False),
    sa.Column('grade_column_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['grade_column_id'], ['grade_column.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['student_id'], ['students.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    
    # Функция для вставки данных, если таблицы уже существуют
    def insert_ignore(table_name, rows):
        """Вставляет строки, игнорируя дубликаты (для MySQL)"""
        # Используем op.execute для выполнения "сырого" SQL (но безопасно параметризуем)
        # TODO: Адаптировать для других СУБД, если потребуется
        cols = ', '.join(rows[0].keys())
        values = ', '.join(['(' + ', '.join([repr(row[col]) for col in row]) + ')' for row in rows])

        # SQL injection невозможна, если cols и values параметризованы и не содержат ввода пользователя
        op.execute(f"INSERT IGNORE INTO {table_name} ({cols}) VALUES {values}")

    op.execute("INSERT IGNORE INTO spr_discipline (id, title) VALUES (1001, 'Основы программирования')")
    op.execute("INSERT IGNORE INTO tbl_aup (id_aup, num_aup, base, id_faculty, id_rop, type_educ, qualification, type_standard, id_department, period_educ, id_degree, id_form, years, year_beg, year_end, is_actual) VALUES (101, 'B093011451', 'Base', 1, 1, 'Бакалавриат', 'Бакалавр', 'ФГОС 3++', 1, '4 года', 1, 1, 4, 2023, 2027, 1)")
    # Выполняем операции только если что то меняем в existing-tables

    # 1. Указывать правильные названия таблиц. Чтобы работало с "Картами Дисциплин",
    # рекомендуется использовать в именах кавычки:
    # op.bulk_insert(название_таблицы, набор данных, ...). Либо
    # Использовать op.execute()

    # 2. Выполнять операции batch-wise, чтобы было быстрее
    insert_ignore(
        'competencies_competency_type',
        [
            {'id': 1, 'code': 'УК', 'name': 'Универсальная компетенция'},
            {'id': 2, 'code': 'ОПК', 'name': 'Общепрофессиональная компетенция'},
            {'id': 3, 'code': 'ПК', 'name': 'Профессиональная компетенция'}
        ]
    )

    insert_ignore(
        'competencies_fgos_vo',
        [
            {'id': 1, 'number': '929', 'date': '2017-09-19', 'direction_code': '09.03.01',
             'direction_name': 'Информатика и вычислительная техника', 'education_level': 'бакалавриат', 'generation': '3++'}
        ]
    )

    insert_ignore(
        'competencies_educational_program',
        [
            {'id': 1, 'fgos_vo_id': 1, 'code': '09.03.01', 'name': 'Веб-технологии',
             'profile': 'Веб-технологии', 'qualification': 'Бакалавр', 'form_of_education': 'очная', 'enrollment_year': 2024}
        ]
    )
     # Связываем ОП с АУП
    insert_ignore(
        'competencies_educational_program_aup',
        [
            {'educational_program_id': 1, 'aup_id': 101, 'is_primary': True}
        ]
    )

    insert_ignore(
        'competencies_competency',
        [
            {'id': 1, 'competency_type_id': 1, 'code': 'УК-1', 'fgos_vo_id':1,
             'name': 'Способен осуществлять поиск, критический анализ и синтез информации...'},
            {'id': 2, 'competency_type_id': 2, 'code': 'ОПК-1', 'fgos_vo_id':1,
             'name': 'Способен применять естественнонаучные и общеинженерные знания...'},
            {'id': 3, 'competency_type_id': 3, 'code': 'ПК-1', 'fgos_vo_id':None,
             'name': 'Способен выполнять работы по созданию (модификации) и сопровождению ИС...'}
        ]
    )

    insert_ignore(
        'competencies_indicator',
        [
            {'id': 10, 'competency_id': 1, 'code': 'ИУК-1.1',
             'formulation': 'Анализирует задачу, выделяя ее базовые составляющие', 'source': 'ФГОС'},
            {'id': 11, 'competency_id': 2, 'code': 'ИОПК-1.1', 'formulation': 'Знает основы высшей математики...',
             'source': 'ФГОС'},
            {'id': 12, 'competency_id': 3, 'code': 'ИПК-1.1', 'formulation': 'Знает: методологию и технологии проектирования ИС...',
             'source': 'ПС'}
        ]
    )

    # Создаем одну тестовую связь (AupData 501 - должно существовать! -  и Indicator 11)
    insert_ignore(
        'competencies_matrix',
        [
            {'aup_data_id': 501, 'indicator_id': 11}
        ]
    )

    # -- Если есть дополнительные FK - например, к таблицам map, добавлять insert_ignore перед
    # -- и раскомментировать --
    # op.execute("INSERT INTO types (id, type) VALUES (1, 'cat'), (2, 'dog')")
    # op.bulk_insert(types, [
    #
    # ])
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('grades')
    op.drop_table('grade_column')
    op.drop_table('topic')
    op.drop_table('grade_type')
    op.drop_table('tutors_order_row')
    op.drop_table('students')
    op.drop_table('grade_table')
    op.drop_table('discipline_table')
    op.drop_table('competencies_matrix')
    op.drop_table('competencies_indicator_ps_link')
    op.drop_table('ChangeLog')
    op.drop_table('users_faculty')
    op.drop_table('user_roles')
    op.drop_table('tbl_token')
    op.drop_table('study_group')
    op.drop_table('competencies_indicator')
    op.drop_table('competencies_educational_program_aup')
    op.drop_table('aup_data')
    op.drop_table('Revision')
    op.drop_table('unification_load')
    op.drop_table('tutors')
    op.drop_table('tbl_users')
    op.drop_table('tbl_aup')
    op.drop_table('faculty_discipline_period')
    op.drop_table('competencies_required_skill')
    op.drop_table('competencies_required_knowledge')
    op.drop_table('competencies_labor_action')
    op.drop_table('competencies_competency')
    op.drop_table('unification_okso_assoc')
    op.drop_table('tutors_order')
    op.drop_table('tbl_department')
    op.drop_table('discipline_period_assoc')
    op.drop_table('competencies_labor_function')
    op.drop_table('competencies_educational_program_ps')
    op.drop_table('unification_discipline')
    op.drop_table('spr_volume_degree_zet')
    op.drop_table('spr_name_op')
    op.drop_table('spr_faculty')
    op.drop_table('competencies_generalized_labor_function')
    op.drop_table('competencies_fgos_recommended_ps')
    op.drop_table('competencies_educational_program')
    op.drop_table('Permissions')
    op.drop_table('spr_standard_zet')
    op.drop_table('spr_rop')
    op.drop_table('spr_place')
    op.drop_table('spr_okco')
    op.drop_table('spr_form_education')
    op.drop_table('spr_discipline')
    op.drop_table('spr_degree_education')
    op.drop_table('spr_branch')
    op.drop_table('spr_bells')
    op.drop_table('roles')
    op.drop_table('competencies_prof_standard')
    op.drop_table('competencies_fgos_vo')
    op.drop_table('competencies_competency_type')
    op.drop_table('Mode')
    # ### end Alembic commands ###
